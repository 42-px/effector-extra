{"version":3,"file":"effector-extra.cjs.js","sources":["../src/attach-wrapper/index.ts","../src/effector-event-batcher/index.ts","../src/create-service/index.ts","../src/mocks/index.ts"],"sourcesContent":["import {\n    Effect, createEffect, Domain,\n} from \"effector\"\n\nexport function attachWrapper<AttachP, AttachD, AttachF, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapResult,\n    mapError,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n  mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n}): Effect<AttachP, AttachD, AttachF>\nexport function attachWrapper<AttachP, AttachD, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapResult,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n}): Effect<AttachP, AttachD, F>\nexport function attachWrapper<AttachP, AttachF, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapError,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n}): Effect<AttachP, D, AttachF>\nexport function attachWrapper(args: any): any {\n    const handler = (params: any) => {\n        let promise: any = args.effect(args.mapParams(params))\n        if (args.mapResult) {\n            promise = promise.then(\n                (result: any) => args.mapResult({ params, result })\n            )\n        }\n        if (args.mapError) {\n            promise = promise.catch((error: any) => {\n                throw args.mapError({ params, error })\n            })\n        }\n        return promise\n    }\n\n\n    const effect =  args.domain\n        ? args.domain.effect()\n        : createEffect()\n    effect.use(handler)\n    return effect\n}\n","import {\n    createEvent,\n    createStore,\n    Event,\n    guard,\n    sample,\n} from \"effector\"\n\nexport function batchEvents<T>(trigger: Event<T>, timeout: number): Event<T[]> {\n    const event = createEvent<T[]>()\n    const pushStore = createEvent<T>()\n    const resetStore = createEvent()\n    const timeoutEnd = createEvent()\n    const $storedEvents = createStore<T[]>([])\n    $storedEvents\n        .on(pushStore, (prevValue, value) => [...prevValue, value])\n        .reset(resetStore)\n\n    let timeoutId: any\n    trigger.watch((payload) => {\n        if (timeoutId !== undefined) {\n            clearTimeout(timeoutId)\n            pushStore(payload)\n        } else {\n            event([payload])\n        }\n        timeoutId = setTimeout(() => {\n            timeoutId = undefined\n            timeoutEnd()\n        }, timeout)\n    })\n    guard({\n        source: sample(\n            $storedEvents,\n            timeoutEnd,\n            (store) => store,\n        ),\n        filter: $storedEvents.map((store) => Boolean(store.length)),\n    }).watch((payload) => {\n        event(payload)\n        resetStore()\n    })\n    return event\n}\n","import { Domain, Effect } from \"effector\"\nimport { attachWrapper } from \"../attach-wrapper\"\n\ntype Params<P, D, F> = {\n  domain: Domain\n  effect: Effect<P, D, F>\n}\n\nexport function createService<P, D, F>({ domain, effect }: Params<P, D, F>) {\n    function createMethod<AttachP, AttachD, AttachF>({\n        mapParams,\n        mapResult,\n        mapError,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n      mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n    }): Effect<AttachP, AttachD, AttachF>\n    function createMethod<AttachP, AttachD>({\n        mapParams,\n        mapResult,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n    }): Effect<AttachP, AttachD, F>\n    function createMethod<AttachP, AttachF>({\n        mapParams,\n        mapError,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n    }): Effect<AttachP, D, AttachF>\n    function createMethod(args: any): any {\n        return attachWrapper({ domain, effect, ...args })\n    }\n\n    return { createMethod }\n}\n","import { Effect, Store } from 'effector'\n\ninterface EffectsMapper extends Map<any, any> {\n    set<P, D, E>(effect: Effect<P, D, E>, handler: (params: P) => D | Promise<D>): this;\n}\n\nexport const mockEffects = (): EffectsMapper => {\n    return new Map()\n}\n\ninterface StoreMapper extends Map<any, any> {\n  set<V>(store: Store<V>, value: V): this;\n}\n\nexport const mockStores = (): StoreMapper => {\n  return new Map()\n}"],"names":["attachWrapper","args","effect","domain","createEffect","use","params","promise","mapParams","mapResult","then","result","mapError","error","trigger","timeout","timeoutId","event","createEvent","pushStore","resetStore","timeoutEnd","$storedEvents","createStore","on","prevValue","value","reset","watch","payload","undefined","clearTimeout","setTimeout","guard","source","sample","store","filter","map","Boolean","length","createMethod","Map"],"mappings":"uGAuCgBA,EAAcC,OAiBpBC,EAAUD,EAAKE,OACfF,EAAKE,OAAOD,+CACZE,8DACNF,EAAOG,KAnBS,SAACC,OACTC,EAAeN,EAAKC,OAAOD,EAAKO,UAAUF,0CAC1CL,EAAKQ,YACLF,EAAUA,EAAQG,MACd,SAACC,UAAgBV,EAAKQ,UAAU,CAAEH,OAAAA,EAAQK,OAAAA,QAG9CV,EAAKW,WACLL,EAAUA,SAAc,SAACM,SACfZ,EAAKW,SAAS,CAAEN,OAAAA,EAAQO,MAAAA,QAG/BN,KAQJL,unCCpDoBY,EAAmBC,OAU1CC,EATEC,EAAQC,oDACRC,EAAYD,4DACZE,EAAaF,8DACbG,EAAaH,8DACbI,EAAgBC,cAAiB,+CACvCD,EACKE,GAAGL,GAAW,SAACM,EAAWC,qBAAcD,IAAWC,OACnDC,MAAMP,GAGXN,EAAQc,OAAM,SAACC,QACOC,IAAdd,GACAe,aAAaf,GACbG,EAAUU,IAEVZ,EAAM,CAACY,IAEXb,EAAYgB,YAAW,WACnBhB,OAAYc,EACZT,MACDN,MAEPkB,QAAM,CACFC,OAAQC,SACJb,EACAD,GACA,SAACe,UAAUA,KAEfC,OAAQf,EAAcgB,KAAI,SAACF,UAAUG,QAAQH,EAAMI,aACpDZ,OAAM,SAACC,GACNZ,EAAMY,GACNT,OAEGH,yCClC8Bd,IAAAA,OAAQD,IAAAA,aA4BtC,CAAEuC,sBAJaxC,UACXD,mWAAgBG,OAAAA,EAAQD,OAAAA,GAAWD,2BC3BvB,kBAChB,IAAIyC,wBAOW,kBACjB,IAAIA"}