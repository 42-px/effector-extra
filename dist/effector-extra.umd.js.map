{"version":3,"file":"effector-extra.umd.js","sources":["../src/attach-wrapper/index.ts","../src/effector-event-batcher/index.ts","../src/mocks/index.ts","../src/create-service/index.ts"],"sourcesContent":["import {\n    Effect, createEffect, Domain,\n} from \"effector\"\n\nexport function attachWrapper<AttachP, AttachD, AttachF, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapResult,\n    mapError,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n  mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n}): Effect<AttachP, AttachD, AttachF>\nexport function attachWrapper<AttachP, AttachD, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapResult,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n}): Effect<AttachP, AttachD, F>\nexport function attachWrapper<AttachP, AttachF, P, D, F>({\n    domain,\n    effect,\n    mapParams,\n    mapError,\n}: {\n  domain?: Domain\n  effect: Effect<P, D, F>\n  mapParams: (params: AttachP) => P\n  mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n}): Effect<AttachP, D, AttachF>\nexport function attachWrapper(args: any): any {\n    const handler = (params: any) => {\n        let promise: any = args.effect(args.mapParams(params))\n        if (args.mapResult) {\n            promise = promise.then(\n                (result: any) => args.mapResult({ params, result })\n            )\n        }\n        if (args.mapError) {\n            promise = promise.catch((error: any) => {\n                throw args.mapError({ params, error })\n            })\n        }\n        return promise\n    }\n\n\n    const effect =  args.domain\n        ? args.domain.effect()\n        : createEffect()\n    effect.use(handler)\n    return effect\n}\n","import {\n    createEvent,\n    createStore,\n    Event,\n    guard,\n    sample,\n} from \"effector\"\n\nexport function batchEvents<T>(trigger: Event<T>, timeout: number): Event<T[]> {\n    const event = createEvent<T[]>()\n    const pushStore = createEvent<T>()\n    const resetStore = createEvent()\n    const timeoutEnd = createEvent()\n    const $storedEvents = createStore<T[]>([])\n    $storedEvents\n        .on(pushStore, (prevValue, value) => [...prevValue, value])\n        .reset(resetStore)\n\n    let timeoutId: any\n    trigger.watch((payload) => {\n        if (timeoutId !== undefined) {\n            clearTimeout(timeoutId)\n            pushStore(payload)\n        } else {\n            event([payload])\n        }\n        timeoutId = setTimeout(() => {\n            timeoutId = undefined\n            timeoutEnd()\n        }, timeout)\n    })\n    guard({\n        source: sample(\n            $storedEvents,\n            timeoutEnd,\n            (store) => store,\n        ),\n        filter: $storedEvents.map((store) => Boolean(store.length)),\n    }).watch((payload) => {\n        event(payload)\n        resetStore()\n    })\n    return event\n}\n","import { Effect, Store } from 'effector'\n\ninterface EffectsMapper extends Map<any, any> {\n    set<P, D, E>(effect: Effect<P, D, E>, handler: (params: P) => D | Promise<D>): this;\n}\n\nexport const mockEffects = (): EffectsMapper => {\n    return new Map()\n}\n\ninterface StoreMapper extends Map<any, any> {\n  set<V>(store: Store<V>, value: V): this;\n}\n\nexport const mockStores = (): StoreMapper => {\n  return new Map()\n}","import { Domain, Effect } from \"effector\"\nimport { attachWrapper } from \"../attach-wrapper\"\n\ntype Params<P, D, F> = {\n  domain: Domain\n  effect: Effect<P, D, F>\n}\n\nexport function createService<P, D, F>({ domain, effect }: Params<P, D, F>) {\n    function createMethod<AttachP, AttachD, AttachF>({\n        mapParams,\n        mapResult,\n        mapError,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n      mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n    }): Effect<AttachP, AttachD, AttachF>\n    function createMethod<AttachP, AttachD>({\n        mapParams,\n        mapResult,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapResult: ({ params, result }: { params: AttachP; result: D }) => AttachD\n    }): Effect<AttachP, AttachD, F>\n    function createMethod<AttachP, AttachF>({\n        mapParams,\n        mapError,\n    }: {\n      mapParams: (params: AttachP) => P\n      mapError: ({ params, error }: { params: AttachP; error: F }) => AttachF\n    }): Effect<AttachP, D, AttachF>\n    function createMethod(args: any): any {\n        return attachWrapper({ domain, effect, ...args })\n    }\n\n    return { createMethod }\n}\n"],"names":["attachWrapper","args","handler","params","promise","effect","mapParams","mapResult","then","result","mapError","error","domain","createEffect","use","batchEvents","trigger","timeout","event","createEvent","pushStore","resetStore","timeoutEnd","$storedEvents","createStore","on","prevValue","value","reset","timeoutId","watch","payload","undefined","clearTimeout","setTimeout","guard","source","sample","store","filter","map","Boolean","length","mockEffects","Map","mockStores","createService","createMethod"],"mappings":";;;;;;WAuCgBA,cAAcC;EAC1B,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD;EACZ,QAAIC,OAAO,GAAQH,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACK,SAAL,CAAeH,MAAf,CAAZ;EAAA;EAAA;EAAA,MAAnB;;EACA,QAAIF,IAAI,CAACM,SAAT,EAAoB;EAChBH,MAAAA,OAAO,GAAGA,OAAO,CAACI,IAAR,CACN,UAACC,MAAD;EAAA,eAAiBR,IAAI,CAACM,SAAL,CAAe;EAAEJ,UAAAA,MAAM,EAANA,MAAF;EAAUM,UAAAA,MAAM,EAANA;EAAV,SAAf,CAAjB;EAAA,OADM,CAAV;EAGH;;EACD,QAAIR,IAAI,CAACS,QAAT,EAAmB;EACfN,MAAAA,OAAO,GAAGA,OAAO,SAAP,CAAc,UAACO,KAAD;EACpB,cAAMV,IAAI,CAACS,QAAL,CAAc;EAAEP,UAAAA,MAAM,EAANA,MAAF;EAAUQ,UAAAA,KAAK,EAALA;EAAV,SAAd,CAAN;EACH,OAFS,CAAV;EAGH;;EACD,WAAOP,OAAP;EACH,GAbD;;EAgBA,MAAMC,MAAM,GAAIJ,IAAI,CAACW,MAAL,GACVX,IAAI,CAACW,MAAL,CAAYP,MAAZ;EAAA;EAAA;EAAA,IADU,GAEVQ,qBAAY;EAAA;EAAA;EAAA,IAFlB;EAGAR,EAAAA,MAAM,CAACS,GAAP,CAAWZ,OAAX;EACA,SAAOG,MAAP;EACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WCrDeU,YAAeC,SAAmBC;EAC9C,MAAMC,KAAK,GAAGC,oBAAW;EAAA;EAAA;EAAA,IAAzB;EACA,MAAMC,SAAS,GAAGD,oBAAW;EAAA;EAAA;EAAA,IAA7B;EACA,MAAME,UAAU,GAAGF,oBAAW;EAAA;EAAA;EAAA,IAA9B;EACA,MAAMG,UAAU,GAAGH,oBAAW;EAAA;EAAA;EAAA,IAA9B;EACA,MAAMI,aAAa,GAAGC,oBAAW,CAAM,EAAN;EAAA;EAAA;EAAA,IAAjC;EACAD,EAAAA,aAAa,CACRE,EADL,CACQL,SADR,EACmB,UAACM,SAAD,EAAYC,KAAZ;EAAA,wCAA0BD,SAA1B,IAAqCC,KAArC;EAAA,GADnB,EAEKC,KAFL,CAEWP,UAFX;EAIA,MAAIQ,SAAJ;EACAb,EAAAA,OAAO,CAACc,KAAR,CAAc,UAACC,OAAD;EACV,QAAIF,SAAS,KAAKG,SAAlB,EAA6B;EACzBC,MAAAA,YAAY,CAACJ,SAAD,CAAZ;EACAT,MAAAA,SAAS,CAACW,OAAD,CAAT;EACH,KAHD,MAGO;EACHb,MAAAA,KAAK,CAAC,CAACa,OAAD,CAAD,CAAL;EACH;;EACDF,IAAAA,SAAS,GAAGK,UAAU,CAAC;EACnBL,MAAAA,SAAS,GAAGG,SAAZ;EACAV,MAAAA,UAAU;EACb,KAHqB,EAGnBL,OAHmB,CAAtB;EAIH,GAXD;EAYAkB,EAAAA,cAAK;EAAA,QAAC;EACFC,MAAAA,MAAM,EAAEC,eAAM;EAAA,YACVd,aADU,EAEVD,UAFU,EAGV,UAACgB,KAAD;EAAA,iBAAWA,KAAX;EAAA,SAHU;EAAA;EAAA;EAAA;EAAA;EAAA,QADZ;EAMFC,MAAAA,MAAM,EAAEhB,aAAa,CAACiB,GAAd,CAAkB,UAACF,KAAD;EAAA,eAAWG,OAAO,CAACH,KAAK,CAACI,MAAP,CAAlB;EAAA,OAAlB;EANN,KAAD;EAAA;EAAA;EAAA;EAAA,IAAL,CAOGZ,KAPH,CAOS,UAACC,OAAD;EACLb,IAAAA,KAAK,CAACa,OAAD,CAAL;EACAV,IAAAA,UAAU;EACb,GAVD;EAWA,SAAOH,KAAP;EACH;;MCrCYyB,WAAW,GAAG,SAAdA,WAAc;EACvB,SAAO,IAAIC,GAAJ,EAAP;EACH;MAMYC,UAAU,GAAG,SAAbA,UAAa;EACxB,SAAO,IAAID,GAAJ,EAAP;EACD;;WCReE;QAAyBlC,cAAAA;QAAQP,cAAAA;;EAwB7C,WAAS0C,YAAT,CAAsB9C,IAAtB;EACI,WAAOD,aAAa;EAAGY,MAAAA,MAAM,EAANA,MAAH;EAAWP,MAAAA,MAAM,EAANA;EAAX,OAAsBJ,IAAtB,EAApB;EACH;;EAED,SAAO;EAAE8C,IAAAA,YAAY,EAAZA;EAAF,GAAP;EACH;;;;;;;;;;;;;;;;"}